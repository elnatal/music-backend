// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  USER
  ARTIST
  ADMIN
}

model User {
  id          String      @id @default(uuid())
  name        String?
  deteOfBirth DateTime?
  accountType AccountType @default(USER)
  firebaseId  String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  songs       Song[]
  likedSongs        Like[]

  @@map("users")
}

model Genre {
  id        String      @id @default(uuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  songs     SongGenre[]

  @@map("geners")
}

model Song {
  id        String      @id @default(uuid())
  title     String
  fileUrl   String
  artistId  String
  artist    User        @relation(fields: [artistId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  genres    SongGenre[]
  likes      Like[]

  @@map("songs")
}

model SongGenre {
  songId    String
  song      Song     @relation(fields: [songId], references: [id])
  genreId   String
  genre     Genre    @relation(fields: [genreId], references: [id])
  createdAt DateTime @default(now())

  @@id([songId, genreId])
  @@map("song_genres")
}

model Like {
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  songId    String
  song      Song     @relation(fields: [songId], references: [id])
  createdAt DateTime @default(now())

  @@id([userId, songId])
  @@map("likes")
}
